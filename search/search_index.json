{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Create custom and tailor made Django project! Creates custom Django project layout. Compatible with Django 2.2.8 and requires Python 3.7.x . By default, project uses PostgreSQL , this means you need to install :) macOS users can install via brew install postgres Requirements Python 3.7.x PostgreSQL Installation $ pip install django-vb-admin This package heavily depends on django-vb-baseapp . All the rake tasks are related to django-vb-baseapp . You don\u2019t need to do anything, django-vb-admin installs required packages automatically. Usage After installation, you\u2019ll have a command: django-vb-admin $ django-vb-admin -h usage: django-vb-admin [ -h ] [ -t TARGET ] [ -v { 0 ,1 }] [ --version ] [{ startproject }] Create new Django project positional arguments: { startproject } Name of command ( s ) optional arguments: -h, --help show this help message and exit -t TARGET, --target TARGET Target path -v { 0 ,1 } , --verbosity { 0 ,1 } Verbose mode --version show program ' s version number and exit Now you can check the example page License This project is licensed under MIT Contributer(s) U\u011fur \"vigo\" \u00d6zy\u0131lmazel - Creator, maintainer Contribute All PR\u2019s are welcome! fork (https://github.com/vbyazilim/django-vb-admin/fork) Create your branch ( git checkout -b my-features ) commit yours ( git commit -am 'Add awesome feature' ) push your branch ( git push origin my-features ) Than create a new Pull Request !","title":"Home"},{"location":"#create-custom-and-tailor-made-django-project","text":"Creates custom Django project layout. Compatible with Django 2.2.8 and requires Python 3.7.x . By default, project uses PostgreSQL , this means you need to install :) macOS users can install via brew install postgres","title":"Create custom and tailor made Django project!"},{"location":"#requirements","text":"Python 3.7.x PostgreSQL","title":"Requirements"},{"location":"#installation","text":"$ pip install django-vb-admin This package heavily depends on django-vb-baseapp . All the rake tasks are related to django-vb-baseapp . You don\u2019t need to do anything, django-vb-admin installs required packages automatically.","title":"Installation"},{"location":"#usage","text":"After installation, you\u2019ll have a command: django-vb-admin $ django-vb-admin -h usage: django-vb-admin [ -h ] [ -t TARGET ] [ -v { 0 ,1 }] [ --version ] [{ startproject }] Create new Django project positional arguments: { startproject } Name of command ( s ) optional arguments: -h, --help show this help message and exit -t TARGET, --target TARGET Target path -v { 0 ,1 } , --verbosity { 0 ,1 } Verbose mode --version show program ' s version number and exit Now you can check the example page","title":"Usage"},{"location":"#license","text":"This project is licensed under MIT","title":"License"},{"location":"#contributers","text":"U\u011fur \"vigo\" \u00d6zy\u0131lmazel - Creator, maintainer","title":"Contributer(s)"},{"location":"#contribute","text":"All PR\u2019s are welcome! fork (https://github.com/vbyazilim/django-vb-admin/fork) Create your branch ( git checkout -b my-features ) commit yours ( git commit -am 'Add awesome feature' ) push your branch ( git push origin my-features ) Than create a new Pull Request !","title":"Contribute"},{"location":"example/","text":"Example We\u2019re going to create a Django project skeleton! Let\u2019s create project: $ mkdir /path/to/my-django-project/ $ cd /path/to/my-django-project $ django-vb-admin startproject # create structure to current working directory # or $ django-vb-admin startproject --target = \"/path/to/folder\" # create structure to given path When creation completed, you can create your virtual environment and set your environment variables: export DJANGO_SECRET = $( head -c 75 /dev/random | base64 | tr -dc 'a-zA-Z0-9' | head -c 50 ) export DATABASE_URL = \"postgres://localhost:5432/my_project_dev\" then; $ pip install -r requirements/development.pip Directory structure: . \u251c\u2500\u2500 applications \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 settings \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 base.py \u2502 \u2502 \u251c\u2500\u2500 development.example.py \u2502 \u2502 \u251c\u2500\u2500 heroku.py \u2502 \u2502 \u251c\u2500\u2500 production.py \u2502 \u2502 \u2514\u2500\u2500 test.example.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u251c\u2500\u2500 locale \u2502 \u2514\u2500\u2500 tr \u2502 \u2514\u2500\u2500 LC_MESSAGES \u2502 \u251c\u2500\u2500 django.mo \u2502 \u2514\u2500\u2500 django.po \u251c\u2500\u2500 requirements \u2502 \u251c\u2500\u2500 base.pip \u2502 \u251c\u2500\u2500 development.pip \u2502 \u251c\u2500\u2500 heroku.pip \u2502 \u2514\u2500\u2500 production.pip \u251c\u2500\u2500 static \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 application.css \u2502 \u2502 \u2514\u2500\u2500 bulma.min.X.X.X.css \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2514\u2500\u2500 .gitkeep \u2502 \u2514\u2500\u2500 js \u2502 \u251c\u2500\u2500 .gitkeep \u2502 \u251c\u2500\u2500 application.js \u2502 \u2514\u2500\u2500 fontawesome.X.X.X.all.js \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 admin \u2502 \u2502 \u2514\u2500\u2500 base_site.html \u2502 \u251c\u2500\u2500 custom_errors \u2502 \u2502 \u251c\u2500\u2500 400 .html \u2502 \u2502 \u251c\u2500\u2500 403 .html \u2502 \u2502 \u251c\u2500\u2500 404 .html \u2502 \u2502 \u2514\u2500\u2500 500 .html \u2502 \u2514\u2500\u2500 base.html \u251c\u2500\u2500 .bandit \u251c\u2500\u2500 .flake8 \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 .isort.cfg \u251c\u2500\u2500 .pylintrc \u251c\u2500\u2500 .python-version \u251c\u2500\u2500 .ruby-version \u251c\u2500\u2500 .tm_properties \u251c\u2500\u2500 Procfile \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 runtime.txt Now you can init git : $ cd /path/to/my-django-project/ $ git init Shipped Packages Common packages: requirements/base.pip Django == 2 .2.8 Pillow == 6 .2.1 django-extensions == 2 .2.5 python-slugify == 4 .0.0 psycopg2-binary == 2 .8.4 dj-database-url == 0 .5.0 django-vb-baseapp vb-console Development packages: requirements/development.pip -r base.pip ipython == 7 .10.0 ipdb == 0 .12.3 prompt-toolkit == 2 .0.10 bpython == 0 .18 ptpython == 2 .0.6 Werkzeug == 0 .16.0 django-debug-toolbar == 2 .1 coverage == 4 .5.4 isort == 4 .3.21 black == 19 .10b0 flake8 == 3 .7.9 flake8-bandit == 2 .1.2 flake8-blind-except == 0 .1.1 flake8-bugbear == 19 .8.0 flake8-builtins == 1 .4.1 flake8-polyfill == 1 .0.2 flake8-print == 3 .1.4 flake8-quotes == 2 .1.1 flake8-string-format == 0 .2.3 pylint == 2 .4.4 Note : Package order is important here. Due to prompt-toolkit dependency on ipdb and ptpython , we need to install specific version: prompt-toolkit==2.0.10 in the given order. Packages are test on Python 3.8.0 environment and had issues with ipdb , ipython and other repls. Heroku related packages: requirements/heroku.pip -r base.pip gunicorn == 20 .0.4 whitenoise == 4 .1.4 boto3 == 1 .10.33 django-storages == 1 .8 Linux/Production packages: requirements/production.pip -r base.pip uWSGI == 2 .0.18 Heroku and AWS Built-in support for AWS-S3 Storage . You need to create/get your: S3_ACCESS_KEY_ID S3_SECRET_ACCESS_KEY and set those variables on Heroku. Please check config/settings/heroku.py for more details. Basic Heroku setup: $ heroku login $ heroku apps:create $ heroku addons:create heroku-postgresql:hobby-dev $ heroku config:set DJANGO_ENV = \"heroku\" $ heroku config:set DJANGO_SECRET = 'YOUR_GENERATED_RANDOM_SECRET' $ heroku config:set S3_ACCESS_KEY_ID = 'YOUR_S3_ACCESS_KEY_ID' $ heroku config:set S3_SECRET_ACCESS_KEY = 'YOUR_S3_SECRET_ACCESS_KEY' $ heroku config:set S3_BUCKET_NAME = 'YOUR_S3_BUCKET_NAME' $ heroku config:set WEB_CONCURRENCY = 3 $ git push heroku master $ heroku run python manage.py migrate $ heroku run python manage.py createsuperuser If you want to use email reporter for Django errors, you need to set couple more environment variables on Heroku side too.","title":"Example"},{"location":"example/#example","text":"We\u2019re going to create a Django project skeleton!","title":"Example"},{"location":"example/#lets-create-project","text":"$ mkdir /path/to/my-django-project/ $ cd /path/to/my-django-project $ django-vb-admin startproject # create structure to current working directory # or $ django-vb-admin startproject --target = \"/path/to/folder\" # create structure to given path When creation completed, you can create your virtual environment and set your environment variables: export DJANGO_SECRET = $( head -c 75 /dev/random | base64 | tr -dc 'a-zA-Z0-9' | head -c 50 ) export DATABASE_URL = \"postgres://localhost:5432/my_project_dev\" then; $ pip install -r requirements/development.pip Directory structure: . \u251c\u2500\u2500 applications \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 settings \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 base.py \u2502 \u2502 \u251c\u2500\u2500 development.example.py \u2502 \u2502 \u251c\u2500\u2500 heroku.py \u2502 \u2502 \u251c\u2500\u2500 production.py \u2502 \u2502 \u2514\u2500\u2500 test.example.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 urls.py \u2502 \u2514\u2500\u2500 wsgi.py \u251c\u2500\u2500 locale \u2502 \u2514\u2500\u2500 tr \u2502 \u2514\u2500\u2500 LC_MESSAGES \u2502 \u251c\u2500\u2500 django.mo \u2502 \u2514\u2500\u2500 django.po \u251c\u2500\u2500 requirements \u2502 \u251c\u2500\u2500 base.pip \u2502 \u251c\u2500\u2500 development.pip \u2502 \u251c\u2500\u2500 heroku.pip \u2502 \u2514\u2500\u2500 production.pip \u251c\u2500\u2500 static \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 application.css \u2502 \u2502 \u2514\u2500\u2500 bulma.min.X.X.X.css \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2514\u2500\u2500 .gitkeep \u2502 \u2514\u2500\u2500 js \u2502 \u251c\u2500\u2500 .gitkeep \u2502 \u251c\u2500\u2500 application.js \u2502 \u2514\u2500\u2500 fontawesome.X.X.X.all.js \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 admin \u2502 \u2502 \u2514\u2500\u2500 base_site.html \u2502 \u251c\u2500\u2500 custom_errors \u2502 \u2502 \u251c\u2500\u2500 400 .html \u2502 \u2502 \u251c\u2500\u2500 403 .html \u2502 \u2502 \u251c\u2500\u2500 404 .html \u2502 \u2502 \u2514\u2500\u2500 500 .html \u2502 \u2514\u2500\u2500 base.html \u251c\u2500\u2500 .bandit \u251c\u2500\u2500 .flake8 \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 .isort.cfg \u251c\u2500\u2500 .pylintrc \u251c\u2500\u2500 .python-version \u251c\u2500\u2500 .ruby-version \u251c\u2500\u2500 .tm_properties \u251c\u2500\u2500 Procfile \u251c\u2500\u2500 manage.py \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 requirements.txt \u2514\u2500\u2500 runtime.txt Now you can init git : $ cd /path/to/my-django-project/ $ git init","title":"Let\u2019s create project:"},{"location":"example/#shipped-packages","text":"Common packages: requirements/base.pip Django == 2 .2.8 Pillow == 6 .2.1 django-extensions == 2 .2.5 python-slugify == 4 .0.0 psycopg2-binary == 2 .8.4 dj-database-url == 0 .5.0 django-vb-baseapp vb-console Development packages: requirements/development.pip -r base.pip ipython == 7 .10.0 ipdb == 0 .12.3 prompt-toolkit == 2 .0.10 bpython == 0 .18 ptpython == 2 .0.6 Werkzeug == 0 .16.0 django-debug-toolbar == 2 .1 coverage == 4 .5.4 isort == 4 .3.21 black == 19 .10b0 flake8 == 3 .7.9 flake8-bandit == 2 .1.2 flake8-blind-except == 0 .1.1 flake8-bugbear == 19 .8.0 flake8-builtins == 1 .4.1 flake8-polyfill == 1 .0.2 flake8-print == 3 .1.4 flake8-quotes == 2 .1.1 flake8-string-format == 0 .2.3 pylint == 2 .4.4 Note : Package order is important here. Due to prompt-toolkit dependency on ipdb and ptpython , we need to install specific version: prompt-toolkit==2.0.10 in the given order. Packages are test on Python 3.8.0 environment and had issues with ipdb , ipython and other repls. Heroku related packages: requirements/heroku.pip -r base.pip gunicorn == 20 .0.4 whitenoise == 4 .1.4 boto3 == 1 .10.33 django-storages == 1 .8 Linux/Production packages: requirements/production.pip -r base.pip uWSGI == 2 .0.18","title":"Shipped Packages"},{"location":"example/#heroku-and-aws","text":"Built-in support for AWS-S3 Storage . You need to create/get your: S3_ACCESS_KEY_ID S3_SECRET_ACCESS_KEY and set those variables on Heroku. Please check config/settings/heroku.py for more details. Basic Heroku setup: $ heroku login $ heroku apps:create $ heroku addons:create heroku-postgresql:hobby-dev $ heroku config:set DJANGO_ENV = \"heroku\" $ heroku config:set DJANGO_SECRET = 'YOUR_GENERATED_RANDOM_SECRET' $ heroku config:set S3_ACCESS_KEY_ID = 'YOUR_S3_ACCESS_KEY_ID' $ heroku config:set S3_SECRET_ACCESS_KEY = 'YOUR_S3_SECRET_ACCESS_KEY' $ heroku config:set S3_BUCKET_NAME = 'YOUR_S3_BUCKET_NAME' $ heroku config:set WEB_CONCURRENCY = 3 $ git push heroku master $ heroku run python manage.py migrate $ heroku run python manage.py createsuperuser If you want to use email reporter for Django errors, you need to set couple more environment variables on Heroku side too.","title":"Heroku and AWS"},{"location":"rake/","text":"Rake Tasks If you have Ruby installed on your system ( if you are on macOS you\u2019ll have it by default ) you can easily automate your basic operations. Run rake -T for listing available tasks: $ rake -T rake db:migrate [ database ] # Run migration for given database (default: 'default') rake db:roll_back [ name_of_application,name_of_migration ] # Roll-back (name of application, name of migration) rake db:shell # run database shell .. rake db:show [ name_of_application ] # Show migrations for an application (default: 'all') rake db:update [ name_of_application,name_of_migration,is_empty ] # Update migration (name of application, name of migration?, is empty?) rake default # Default task: runserver_plus (Werkzeug) rake locale:compile # Compile locale dictionary rake locale:update # Update locale dictionary rake new:application [ name_of_application ] # Create new Django application rake new:model [ name_of_application,name_of_model,type_of_model ] # Create new Model for given application: django,basemodel,softdelete rake runserver:default # Run: runserver (Django's default server) rake runserver:default_ipdb # Run: runserver (Django's default server) + ipdb debug support rake runserver:plus # Run: runserver_plus (Werkzeug) rake runserver:plus_ipdb # Run: runserver_plus (Werkzeug) + ipdb debug support rake shell [ repl ] # Run shell+ avail: ptpython,ipython,bpython default: ptpython rake test:browse_coverage [ port ] # Browse test coverage rake test:coverage [ cli_args ] # Show test coverage (default: '--show-missing --ignore-errors --skip-covered') rake test:run [ name_of_application,verbose ] # Run tests for given application Rake tasks are the wrapper for Django\u2019s management commands. Mostly related to django-vb-baseapp application. Please checkout https://github.com/vbyazilim/django-vb-baseapp for more detail and examples. django-vb-baseapp has lot of features :)","title":"Rake Tasks"},{"location":"rake/#rake-tasks","text":"If you have Ruby installed on your system ( if you are on macOS you\u2019ll have it by default ) you can easily automate your basic operations. Run rake -T for listing available tasks: $ rake -T rake db:migrate [ database ] # Run migration for given database (default: 'default') rake db:roll_back [ name_of_application,name_of_migration ] # Roll-back (name of application, name of migration) rake db:shell # run database shell .. rake db:show [ name_of_application ] # Show migrations for an application (default: 'all') rake db:update [ name_of_application,name_of_migration,is_empty ] # Update migration (name of application, name of migration?, is empty?) rake default # Default task: runserver_plus (Werkzeug) rake locale:compile # Compile locale dictionary rake locale:update # Update locale dictionary rake new:application [ name_of_application ] # Create new Django application rake new:model [ name_of_application,name_of_model,type_of_model ] # Create new Model for given application: django,basemodel,softdelete rake runserver:default # Run: runserver (Django's default server) rake runserver:default_ipdb # Run: runserver (Django's default server) + ipdb debug support rake runserver:plus # Run: runserver_plus (Werkzeug) rake runserver:plus_ipdb # Run: runserver_plus (Werkzeug) + ipdb debug support rake shell [ repl ] # Run shell+ avail: ptpython,ipython,bpython default: ptpython rake test:browse_coverage [ port ] # Browse test coverage rake test:coverage [ cli_args ] # Show test coverage (default: '--show-missing --ignore-errors --skip-covered') rake test:run [ name_of_application,verbose ] # Run tests for given application Rake tasks are the wrapper for Django\u2019s management commands. Mostly related to django-vb-baseapp application. Please checkout https://github.com/vbyazilim/django-vb-baseapp for more detail and examples. django-vb-baseapp has lot of features :)","title":"Rake Tasks"}]}